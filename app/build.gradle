plugins {
    id 'com.android.application'

}

def generateVersionCode() {
    return (System.currentTimeMillis() / 1000).intValue()
}

def versisonCode = generateVersionCode()
// 生成 versionName 的方法
def generateVersionName() {
    def date = new Date()
    def formattedDate = date.format("YY.MMddHHmm")
    return "1.3." + formattedDate
}

android {
    namespace 'com.fii.targ.gdlpda'
    compileSdk 33

    defaultConfig {
        applicationId "com.fii.targ.gdlpda"
        minSdk 26
        targetSdk 33
        versionCode versisonCode
        versionName generateVersionName()

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            project.ext.buildType = 'release'
        }
        debug {
            project.ext.buildType = 'debug'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildFeatures {
        viewBinding true
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.aar'])
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.9.0'
    implementation 'org.nanohttpd:nanohttpd:2.3.1'
    implementation 'com.google.code.gson:gson:2.8.8'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.6.1'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.6.1'
    implementation 'androidx.navigation:navigation-fragment:2.5.2'
    implementation 'androidx.navigation:navigation-ui:2.5.2'
    implementation 'androidx.recyclerview:recyclerview:1.2.1'
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
    implementation 'com.squareup.okhttp3:okhttp:4.9.1'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.9.1'
    implementation (platform("org.jetbrains.kotlin:kotlin-bom:1.8.0"))

    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'



}

def calculateFileHash(File file) {
    def digest = java.security.MessageDigest.getInstance("SHA-256")
    file.withInputStream { stream ->
        def buffer = new byte[8192]
        def bytesRead
        while ((bytesRead = stream.read(buffer)) != -1) {
            digest.update(buffer, 0, bytesRead)
        }
    }
    return digest.digest().collect { String.format("%02x", it) }.join()
}

task generateUpdateJson {
    doLast {
        def versionCode = versisonCode
        def versionName = generateVersionName()
        def apkFileName = "app-${versionName}.apk"
        def apkUrl = "http://10.81.175.67:8800/update/${apkFileName}"

        def buildType = project.ext.buildType
//        /def buildType = "debug"
        println("buildType: ${buildType}")
        def outputFile

        def apkFile
        if ("${buildType}" == 'release') {
            apkFile = new File("${buildDir}/outputs/apk/release/app-release-unsigned.apk")
            outputFile = new File("${buildDir}/outputs/apk/release/update.json")
        } else if ("${buildType}" == 'debug') {
            apkFile = new File("${buildDir}/outputs/apk/debug/app-debug.apk")
            outputFile = new File("${buildDir}/outputs/apk/debug/update.json")
        }

        println("outputFile: ${outputFile}")
        println("apkFile: ${apkFile}")

        if (apkFile != null && apkFile.exists()) {
            def hash = calculateFileHash(apkFile)
            def updateJson = [
                versionCode: versionCode,
                versionName: versionName,
                apkUrl: apkUrl,
                hash:  hash
            ]

            if ("${buildType}" == 'release') {
                apkFile.renameTo(new File("${buildDir}/outputs/apk/release/${apkFileName}"))
            } else if ("${buildType}" == 'debug') {
                apkFile.renameTo(new File("${buildDir}/outputs/apk/debug/${apkFileName}"))
            }
            println("apk rename to: ${apkFileName}")

            def jsonContent = new groovy.json.JsonBuilder(updateJson).toPrettyString()

            outputFile.parentFile.mkdirs()
            outputFile.text = jsonContent
        }
    }
}

tasks.whenTaskAdded { task ->
    task.finalizedBy(generateUpdateJson)
}

// 在 build.gradle 文件底部添加
tasks.withType(JavaCompile).configureEach {
    options.compilerArgs << "-Xlint:deprecation"
}